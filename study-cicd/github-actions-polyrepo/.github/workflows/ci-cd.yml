name: üè¶ Service CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SERVICE_NAME: ${{ github.event.repository.name }}
  MAVEN_OPTS: -Xmx1g -XX:+UseG1GC

jobs:
  build:
    name: üî® Build Service
    runs-on: ubuntu-latest
    outputs:
      service-name: ${{ env.SERVICE_NAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build service
        run: |
          echo "üî® Building $SERVICE_NAME service..."
          mvn clean compile -DskipTests --batch-mode
          mvn package -DskipTests --batch-mode

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: service-jar
          path: target/*.jar
          retention-days: 1

  test:
    name: üß™ Test Service
    runs-on: ubuntu-latest
    needs: build
    if: github.event.inputs.skip_tests != 'true'
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.SERVICE_NAME }}_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Run unit tests
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.SERVICE_NAME }}_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_pass
        run: |
          echo "üß™ Running tests for $SERVICE_NAME..."
          mvn test --batch-mode
          mvn jacoco:report

      - name: Run integration tests
        env:
          SPRING_PROFILES_ACTIVE: test
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/${{ env.SERVICE_NAME }}_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_pass
        run: |
          echo "üîó Running integration tests for $SERVICE_NAME..."
          mvn integration-test --batch-mode

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            target/surefire-reports/
            target/failsafe-reports/
            target/site/jacoco/
          retention-days: 7

  quality-gate:
    name: üìä Quality Gate
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SERVICE_NAME }}
            -Dsonar.projectName=${{ env.SERVICE_NAME }}

  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: OWASP Dependency Check
        run: |
          echo "üîí Running security scans for $SERVICE_NAME..."
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7 --batch-mode

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: target/dependency-check-report.html
          retention-days: 7

  build-image:
    name: üê≥ Build Image
    runs-on: ubuntu-latest
    needs: [quality-gate, security-scan]
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: service-jar
          path: target/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    name: üöÄ Deploy to Development
    runs-on: ubuntu-latest
    needs: build-image
    if: github.ref == 'refs/heads/main'
    environment:
      name: development/${{ github.event.repository.name }}
      url: https://${{ github.event.repository.name }}-dev.example.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          echo "üöÄ Deploying $SERVICE_NAME to development..."
          helm upgrade --install $SERVICE_NAME-dev ./helm/$SERVICE_NAME \
            --namespace banking-dev \
            --create-namespace \
            --set image.tag=${{ github.sha }} \
            --set environment=dev \
            --wait --timeout=5m

  deploy-staging:
    name: üé≠ Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'release' && contains(github.event.release.tag_name, 'rc')
    environment:
      name: staging/${{ github.event.repository.name }}
      url: https://${{ github.event.repository.name }}-staging.example.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          echo "üöÄ Deploying $SERVICE_NAME to staging..."
          helm upgrade --install $SERVICE_NAME-staging ./helm/$SERVICE_NAME \
            --namespace banking-staging \
            --create-namespace \
            --set image.tag=${{ github.event.release.tag_name }} \
            --set environment=staging \
            --wait --timeout=10m

  deploy-prod:
    name: üè≠ Deploy to Production
    runs-on: ubuntu-latest
    needs: build-image
    if: github.event_name == 'release' && !contains(github.event.release.tag_name, 'rc')
    environment:
      name: production/${{ github.event.repository.name }}
      url: https://${{ github.event.repository.name }}.example.com
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Kubernetes
        run: |
          echo "üöÄ Deploying $SERVICE_NAME to production..."
          helm upgrade --install $SERVICE_NAME-prod ./helm/$SERVICE_NAME \
            --namespace banking-prod \
            --create-namespace \
            --set image.tag=${{ github.event.release.tag_name }} \
            --set environment=prod \
            --set replicas=3 \
            --wait --timeout=15m

  trigger-downstream:
    name: üîÑ Trigger Downstream
    runs-on: ubuntu-latest
    needs: deploy-dev
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger dependent services
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.TRIGGER_TOKEN }}
          script: |
            const serviceName = '${{ env.SERVICE_NAME }}';
            const dependencies = {
              'auth-service': ['account-service', 'payment-service'],
              'account-service': ['payment-service'],
              'payment-service': []
            };
            
            const downstreamServices = dependencies[serviceName] || [];
            
            for (const service of downstreamServices) {
              console.log(`Triggering ${service}...`);
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: service,
                workflow_id: 'ci-cd.yml',
                ref: 'main',
                inputs: {
                  environment: 'dev',
                  skip_tests: 'false'
                }
              });
            }
