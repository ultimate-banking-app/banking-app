stages:
  - build
  - test
  - quality
  - security
  - package
  - deploy
  - trigger

variables:
  MAVEN_OPTS: "-Xmx1g -XX:+UseG1GC"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  SERVICE_NAME: "${CI_PROJECT_NAME}"
  DOCKER_DRIVER: overlay2

# Build Stage
build:
  stage: build
  image: maven:3.9-openjdk-17
  cache:
    key: "${CI_PROJECT_NAME}-maven"
    paths:
      - .m2/repository/
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🔨 Building $SERVICE_NAME service..."
    - mvn $MAVEN_CLI_OPTS clean compile -DskipTests
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - target/*.jar
    expire_in: 1 hour

# Test Stage
unit-tests:
  stage: test
  image: maven:3.9-openjdk-17
  cache:
    key: "${CI_PROJECT_NAME}-maven"
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🧪 Running unit tests for $SERVICE_NAME..."
    - mvn $MAVEN_CLI_OPTS test
    - mvn jacoco:report
  artifacts:
    reports:
      junit:
        - target/surefire-reports/TEST-*.xml
      coverage_report:
        coverage_format: jacoco
        path: target/site/jacoco/jacoco.xml
    paths:
      - target/site/jacoco/
    expire_in: 1 week

integration-tests:
  stage: test
  image: maven:3.9-openjdk-17
  services:
    - postgres:13
  variables:
    POSTGRES_DB: "${SERVICE_NAME}_test"
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_pass
  cache:
    key: "${CI_PROJECT_NAME}-maven"
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🔗 Running integration tests for $SERVICE_NAME..."
    - mvn $MAVEN_CLI_OPTS integration-test
  artifacts:
    reports:
      junit:
        - target/failsafe-reports/TEST-*.xml
    expire_in: 1 week

# Quality Stage
sonarqube-check:
  stage: quality
  image: maven:3.9-openjdk-17
  cache:
    key: "${CI_PROJECT_NAME}-maven"
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "📊 Running SonarQube analysis for $SERVICE_NAME..."
    - mvn $MAVEN_CLI_OPTS sonar:sonar
        -Dsonar.projectKey=$SERVICE_NAME
        -Dsonar.projectName=$SERVICE_NAME
        -Dsonar.host.url=$SONAR_HOST_URL
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  only:
    variables:
      - $SONAR_HOST_URL
      - $SONAR_TOKEN

# Security Stage
security-scan:
  stage: security
  image: maven:3.9-openjdk-17
  cache:
    key: "${CI_PROJECT_NAME}-maven"
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🔒 Running security scans for $SERVICE_NAME..."
    - mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
  artifacts:
    reports:
      dependency_scanning:
        - target/dependency-check-report.json
    paths:
      - target/dependency-check-report.html
    expire_in: 1 week
  allow_failure: true

# Package Stage
build-image:
  stage: package
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🐳 Building Docker image for $SERVICE_NAME..."
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE:latest
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
    - develop

# Deploy Stages
deploy-dev:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl curl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying $SERVICE_NAME to development..."
    - |
      helm upgrade --install $SERVICE_NAME-dev ./helm/$SERVICE_NAME \
        --namespace banking-dev \
        --create-namespace \
        --set image.tag=$CI_COMMIT_SHA \
        --set environment=dev \
        --wait --timeout=5m
  environment:
    name: development/$SERVICE_NAME
    url: https://$SERVICE_NAME-dev.example.com
  only:
    - main

deploy-staging:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl curl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying $SERVICE_NAME to staging..."
    - |
      helm upgrade --install $SERVICE_NAME-staging ./helm/$SERVICE_NAME \
        --namespace banking-staging \
        --create-namespace \
        --set image.tag=$CI_COMMIT_SHA \
        --set environment=staging \
        --wait --timeout=10m
  environment:
    name: staging/$SERVICE_NAME
    url: https://$SERVICE_NAME-staging.example.com
  when: manual
  only:
    - main

deploy-prod:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl curl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying $SERVICE_NAME to production..."
    - |
      helm upgrade --install $SERVICE_NAME-prod ./helm/$SERVICE_NAME \
        --namespace banking-prod \
        --create-namespace \
        --set image.tag=$CI_COMMIT_TAG \
        --set environment=prod \
        --set replicas=3 \
        --wait --timeout=15m
  environment:
    name: production/$SERVICE_NAME
    url: https://$SERVICE_NAME.example.com
  when: manual
  only:
    - tags

# Trigger Downstream Services
trigger-downstream:
  stage: trigger
  image: alpine/curl
  script:
    - echo "🔄 Triggering downstream services for $SERVICE_NAME..."
    - |
      case $SERVICE_NAME in
        "auth-service")
          curl -X POST -F token=$TRIGGER_TOKEN -F ref=main \
            $CI_SERVER_URL/api/v4/projects/account-service-project-id/trigger/pipeline
          curl -X POST -F token=$TRIGGER_TOKEN -F ref=main \
            $CI_SERVER_URL/api/v4/projects/payment-service-project-id/trigger/pipeline
          ;;
        "account-service")
          curl -X POST -F token=$TRIGGER_TOKEN -F ref=main \
            $CI_SERVER_URL/api/v4/projects/payment-service-project-id/trigger/pipeline
          ;;
        *)
          echo "No downstream services for $SERVICE_NAME"
          ;;
      esac
  only:
    - main
  when: manual
