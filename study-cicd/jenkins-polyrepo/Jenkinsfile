pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9'
        jdk 'JDK-17'
    }
    
    environment {
        MAVEN_OPTS = '-Xmx1g -XX:+UseG1GC'
        SERVICE_NAME = "${env.JOB_NAME.split('/')[0]}"
        DOCKER_REGISTRY = 'your-registry.com'
    }
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip running tests'
        )
        booleanParam(
            name: 'TRIGGER_DOWNSTREAM',
            defaultValue: true,
            description: 'Trigger dependent services'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo "üì• Checking out ${SERVICE_NAME} service..."
                checkout scm
                sh 'git log --oneline -3'
            }
        }
        
        stage('Build') {
            steps {
                echo "üî® Building ${SERVICE_NAME} service..."
                sh '''
                    mvn clean compile -DskipTests
                    mvn package -DskipTests
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
                }
            }
        }
        
        stage('Test') {
            when {
                not { params.SKIP_TESTS }
            }
            parallel {
                stage('Unit Tests') {
                    steps {
                        echo "üß™ Running unit tests for ${SERVICE_NAME}..."
                        sh 'mvn test'
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target/site/jacoco',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
                
                stage('Integration Tests') {
                    steps {
                        echo "üîó Running integration tests for ${SERVICE_NAME}..."
                        sh 'mvn integration-test'
                    }
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                echo "üìä Running code quality analysis for ${SERVICE_NAME}..."
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${SERVICE_NAME} \
                            -Dsonar.projectName=${SERVICE_NAME} \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo "üö™ Waiting for quality gate for ${SERVICE_NAME}..."
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo "üîí Running security scans for ${SERVICE_NAME}..."
                sh '''
                    mvn org.owasp:dependency-check-maven:check \
                        -DfailBuildOnCVSS=7 \
                        -DsuppressionsLocation=owasp-suppressions.xml
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Image') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üê≥ Building Docker image for ${SERVICE_NAME}..."
                script {
                    def image = docker.build("${DOCKER_REGISTRY}/${SERVICE_NAME}:${BUILD_NUMBER}")
                    docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-creds') {
                        image.push()
                        image.push('latest')
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üöÄ Deploying ${SERVICE_NAME} to ${params.ENVIRONMENT}..."
                script {
                    def namespace = "banking-${params.ENVIRONMENT}"
                    
                    sh """
                        helm upgrade --install ${SERVICE_NAME}-${params.ENVIRONMENT} ./helm/${SERVICE_NAME} \\
                            --namespace ${namespace} \\
                            --create-namespace \\
                            --set image.tag=${BUILD_NUMBER} \\
                            --set environment=${params.ENVIRONMENT} \\
                            --wait --timeout=5m
                    """
                }
            }
        }
        
        stage('Trigger Downstream') {
            when {
                allOf {
                    params.TRIGGER_DOWNSTREAM
                    anyOf {
                        branch 'main'
                        branch 'develop'
                    }
                }
            }
            steps {
                echo "üîÑ Triggering downstream services..."
                script {
                    // Define service dependencies
                    def dependencies = [
                        'auth-service': ['account-service', 'payment-service'],
                        'account-service': ['payment-service'],
                        'payment-service': []
                    ]
                    
                    def downstreamServices = dependencies[SERVICE_NAME] ?: []
                    
                    downstreamServices.each { service ->
                        build job: "${service}/${env.BRANCH_NAME}",
                              parameters: [
                                  string(name: 'ENVIRONMENT', value: params.ENVIRONMENT),
                                  booleanParam(name: 'SKIP_TESTS', value: false),
                                  booleanParam(name: 'TRIGGER_DOWNSTREAM', value: true)
                              ],
                              wait: false
                    }
                }
            }
        }
    }
    
    post {
        always {
            echo "üßπ Cleaning up workspace for ${SERVICE_NAME}..."
            cleanWs()
        }
        success {
            echo "‚úÖ ${SERVICE_NAME} pipeline completed successfully!"
            slackSend(
                channel: '#banking-ci',
                color: 'good',
                message: "‚úÖ ${SERVICE_NAME} build ${BUILD_NUMBER} succeeded on ${BRANCH_NAME}"
            )
        }
        failure {
            echo "‚ùå ${SERVICE_NAME} pipeline failed!"
            slackSend(
                channel: '#banking-ci',
                color: 'danger',
                message: "‚ùå ${SERVICE_NAME} build ${BUILD_NUMBER} failed on ${BRANCH_NAME}"
            )
        }
    }
}
