stages:
  - build
  - test
  - quality
  - security
  - package
  - deploy

variables:
  MAVEN_OPTS: "-Xmx2g -XX:+UseG1GC"
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version"
  DOCKER_DRIVER: overlay2
  NODE_VERSION: "18"

# Build Stage
build-backend:
  stage: build
  image: maven:3.9-openjdk-17
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🔨 Building backend services..."
    - mvn $MAVEN_CLI_OPTS clean compile -DskipTests
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - "*/target/*.jar"
    expire_in: 1 hour

build-frontend:
  stage: build
  image: node:18-alpine
  cache:
    key: npm-cache
    paths:
      - banking-ui/node_modules/
  script:
    - echo "🎨 Building frontend application..."
    - cd banking-ui
    - npm ci --prefer-offline --no-audit
    - npm run build
  artifacts:
    paths:
      - banking-ui/dist/
    expire_in: 1 hour

# Test Stage
test-backend:
  stage: test
  image: maven:3.9-openjdk-17
  services:
    - postgres:13
  variables:
    POSTGRES_DB: banking_test
    POSTGRES_USER: banking_user
    POSTGRES_PASSWORD: banking_pass
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🧪 Running backend tests..."
    - mvn $MAVEN_CLI_OPTS test
    - mvn jacoco:report
  artifacts:
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
      coverage_report:
        coverage_format: jacoco
        path: "*/target/site/jacoco/jacoco.xml"
    paths:
      - "*/target/site/jacoco/"
    expire_in: 1 week

test-frontend:
  stage: test
  image: node:18-alpine
  cache:
    key: npm-cache
    paths:
      - banking-ui/node_modules/
    policy: pull
  script:
    - echo "🧪 Running frontend tests..."
    - cd banking-ui
    - npm test -- --coverage --watchAll=false
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: banking-ui/coverage/cobertura-coverage.xml
    paths:
      - banking-ui/coverage/
    expire_in: 1 week

# Quality Stage
sonarqube-check:
  stage: quality
  image: maven:3.9-openjdk-17
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "📊 Running SonarQube analysis..."
    - mvn $MAVEN_CLI_OPTS sonar:sonar
        -Dsonar.projectKey=banking-single-repo
        -Dsonar.host.url=$SONAR_HOST_URL
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  only:
    variables:
      - $SONAR_HOST_URL
      - $SONAR_TOKEN

# Security Stage
security-backend:
  stage: security
  image: maven:3.9-openjdk-17
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "🔒 Running backend security scans..."
    - mvn $MAVEN_CLI_OPTS org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
  artifacts:
    reports:
      dependency_scanning:
        - "target/dependency-check-report.json"
    paths:
      - "target/dependency-check-report.html"
    expire_in: 1 week
  allow_failure: true

security-frontend:
  stage: security
  image: node:18-alpine
  cache:
    key: npm-cache
    paths:
      - banking-ui/node_modules/
    policy: pull
  script:
    - echo "🔒 Running frontend security scans..."
    - cd banking-ui
    - npm audit --audit-level=moderate --json > npm-audit.json || true
  artifacts:
    reports:
      dependency_scanning:
        - banking-ui/npm-audit.json
    expire_in: 1 week
  allow_failure: true

# Package Stage
package-services:
  stage: package
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - echo "🐳 Building and pushing Docker images..."
    - |
      for service in auth-service account-service payment-service api-gateway; do
        echo "Building $service..."
        cd $service
        docker build -t $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA .
        docker tag $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$service:latest
        docker push $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA
        docker push $CI_REGISTRY_IMAGE/$service:latest
        cd ..
      done
      
      # Build UI
      cd banking-ui
      docker build -t $CI_REGISTRY_IMAGE/banking-ui:$CI_COMMIT_SHA .
      docker tag $CI_REGISTRY_IMAGE/banking-ui:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/banking-ui:latest
      docker push $CI_REGISTRY_IMAGE/banking-ui:$CI_COMMIT_SHA
      docker push $CI_REGISTRY_IMAGE/banking-ui:latest
  only:
    - main
    - develop

# Deploy Stages
deploy-dev:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying to development..."
    - |
      helm upgrade --install banking-dev ./helm/banking-app \
        --namespace banking-dev \
        --create-namespace \
        --set global.environment=dev \
        --set global.imageTag=$CI_COMMIT_SHA \
        --wait --timeout=10m
  environment:
    name: development
    url: https://banking-dev.example.com
  only:
    - main

deploy-staging:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying to staging..."
    - |
      helm upgrade --install banking-staging ./helm/banking-app \
        --namespace banking-staging \
        --create-namespace \
        --set global.environment=staging \
        --set global.imageTag=$CI_COMMIT_SHA \
        --wait --timeout=15m
  environment:
    name: staging
    url: https://banking-staging.example.com
  when: manual
  only:
    - main

deploy-prod:
  stage: deploy
  image: alpine/helm:latest
  before_script:
    - apk add --no-cache kubectl
    - echo $KUBE_CONFIG | base64 -d > ~/.kube/config
  script:
    - echo "🚀 Deploying to production..."
    - |
      helm upgrade --install banking-prod ./helm/banking-app \
        --namespace banking-prod \
        --create-namespace \
        --set global.environment=prod \
        --set global.imageTag=$CI_COMMIT_TAG \
        --set replicas.auth=3 \
        --set replicas.account=3 \
        --set replicas.payment=3 \
        --wait --timeout=20m
  environment:
    name: production
    url: https://banking.example.com
  when: manual
  only:
    - tags
