pipeline {
    agent any
    
    tools {
        maven 'Maven-3.9'
        nodejs 'NodeJS-18'
        jdk 'JDK-17'
    }
    
    environment {
        MAVEN_OPTS = '-Xmx2g -XX:+UseG1GC'
        DOCKER_REGISTRY = 'your-registry.com'
        SONAR_PROJECT_KEY = 'banking-single-repo'
    }
    
    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['dev', 'staging', 'prod'],
            description: 'Target environment'
        )
        booleanParam(
            name: 'SKIP_TESTS',
            defaultValue: false,
            description: 'Skip running tests'
        )
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üì• Checking out source code...'
                checkout scm
                sh 'git log --oneline -5'
            }
        }
        
        stage('Build Backend') {
            steps {
                echo 'üî® Building backend services...'
                sh '''
                    mvn clean compile -DskipTests
                    mvn package -DskipTests
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: '*/target/*.jar', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Frontend') {
            steps {
                echo 'üé® Building frontend application...'
                dir('banking-ui') {
                    sh '''
                        npm ci
                        npm run build
                    '''
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'banking-ui/dist/**', allowEmptyArchive: true
                }
            }
        }
        
        stage('Test') {
            parallel {
                stage('Backend Tests') {
                    when {
                        not { params.SKIP_TESTS }
                    }
                    steps {
                        echo 'üß™ Running backend tests...'
                        sh 'mvn test'
                    }
                    post {
                        always {
                            publishTestResults testResultsPattern: '*/target/surefire-reports/*.xml'
                            publishHTML([
                                allowMissing: false,
                                alwaysLinkToLastBuild: true,
                                keepAll: true,
                                reportDir: 'target/site/jacoco',
                                reportFiles: 'index.html',
                                reportName: 'Coverage Report'
                            ])
                        }
                    }
                }
                
                stage('Frontend Tests') {
                    when {
                        not { params.SKIP_TESTS }
                    }
                    steps {
                        echo 'üß™ Running frontend tests...'
                        dir('banking-ui') {
                            sh 'npm test -- --coverage --watchAll=false'
                        }
                    }
                }
            }
        }
        
        stage('Code Quality') {
            steps {
                echo 'üìä Running code quality analysis...'
                withSonarQubeEnv('SonarQube') {
                    sh '''
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    '''
                }
            }
        }
        
        stage('Quality Gate') {
            steps {
                echo 'üö™ Waiting for quality gate...'
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
        
        stage('Security Scan') {
            steps {
                echo 'üîí Running security scans...'
                sh '''
                    mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=7
                '''
                dir('banking-ui') {
                    sh 'npm audit --audit-level=moderate'
                }
            }
            post {
                always {
                    archiveArtifacts artifacts: 'target/dependency-check-report.html', allowEmptyArchive: true
                }
            }
        }
        
        stage('Build Images') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo 'üê≥ Building Docker images...'
                script {
                    def services = ['auth-service', 'account-service', 'payment-service', 'api-gateway']
                    
                    services.each { service ->
                        dir(service) {
                            def image = docker.build("${DOCKER_REGISTRY}/${service}:${BUILD_NUMBER}")
                            docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-creds') {
                                image.push()
                                image.push('latest')
                            }
                        }
                    }
                    
                    // Build UI image
                    dir('banking-ui') {
                        def uiImage = docker.build("${DOCKER_REGISTRY}/banking-ui:${BUILD_NUMBER}")
                        docker.withRegistry("https://${DOCKER_REGISTRY}", 'docker-registry-creds') {
                            uiImage.push()
                            uiImage.push('latest')
                        }
                    }
                }
            }
        }
        
        stage('Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'develop'
                }
            }
            steps {
                echo "üöÄ Deploying to ${params.ENVIRONMENT}..."
                script {
                    def namespace = "banking-${params.ENVIRONMENT}"
                    
                    sh """
                        helm upgrade --install banking-${params.ENVIRONMENT} ./helm/banking-app \\
                            --namespace ${namespace} \\
                            --create-namespace \\
                            --set global.environment=${params.ENVIRONMENT} \\
                            --set global.imageTag=${BUILD_NUMBER} \\
                            --wait --timeout=10m
                    """
                    
                    // Health check
                    sh """
                        kubectl wait --for=condition=ready pod \\
                            -l app.kubernetes.io/name=banking-app \\
                            -n ${namespace} \\
                            --timeout=300s
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'üßπ Cleaning up workspace...'
            cleanWs()
        }
        success {
            echo '‚úÖ Pipeline completed successfully!'
            slackSend(
                channel: '#banking-ci',
                color: 'good',
                message: "‚úÖ Banking App build ${BUILD_NUMBER} succeeded on ${BRANCH_NAME}"
            )
        }
        failure {
            echo '‚ùå Pipeline failed!'
            slackSend(
                channel: '#banking-ci',
                color: 'danger',
                message: "‚ùå Banking App build ${BUILD_NUMBER} failed on ${BRANCH_NAME}"
            )
        }
    }
}
