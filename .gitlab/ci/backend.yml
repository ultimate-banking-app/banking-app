.backend-build:
  image: maven:3.9-openjdk-17
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "Building backend services..."
    - mvn $MAVEN_CLI_OPTS clean compile -DskipTests
    - mvn $MAVEN_CLI_OPTS package -DskipTests
  artifacts:
    paths:
      - "*/target/*.jar"
    expire_in: 1 hour

.service-test:
  image: maven:3.9-openjdk-17
  services:
    - postgres:13
  variables:
    POSTGRES_DB: banking_test
    POSTGRES_USER: banking_user
    POSTGRES_PASSWORD: banking_pass
    SPRING_PROFILES_ACTIVE: test
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - echo "Testing $SERVICE_NAME..."
    - cd $SERVICE_NAME
    - mvn $MAVEN_CLI_OPTS test
    - mvn jacoco:report
  artifacts:
    reports:
      junit:
        - "*/target/surefire-reports/TEST-*.xml"
      coverage_report:
        coverage_format: jacoco
        path: "*/target/site/jacoco/jacoco.xml"
    paths:
      - "*/target/site/jacoco/"
    expire_in: 1 week

.sonar-backend:
  image: maven:3.9-openjdk-17
  cache:
    key: maven-cache
    paths:
      - .m2/repository/
    policy: pull
  before_script:
    - export MAVEN_USER_HOME=`pwd`/.m2
  script:
    - mvn $MAVEN_CLI_OPTS sonar:sonar
        -Dsonar.projectKey=banking-backend
        -Dsonar.host.url=$SONAR_HOST_URL
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
  only:
    variables:
      - $SONAR_HOST_URL
      - $SONAR_TOKEN

.package-backend:
  image: docker:24-dind
  services:
    - docker:24-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - |
      for service in auth-service account-service payment-service api-gateway; do
        if [ -f "$service/target/*.jar" ]; then
          echo "Building Docker image for $service..."
          cd $service
          docker build -t $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA .
          docker tag $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA $CI_REGISTRY_IMAGE/$service:latest
          docker push $CI_REGISTRY_IMAGE/$service:$CI_COMMIT_SHA
          docker push $CI_REGISTRY_IMAGE/$service:latest
          cd ..
        fi
      done
